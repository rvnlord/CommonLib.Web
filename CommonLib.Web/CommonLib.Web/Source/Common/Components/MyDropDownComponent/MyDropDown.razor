@using CommonLib.Web.Source.Common.Utils.UtilClasses
@using CommonLib.Web.Source.Common.Converters
@using CommonLib.Source.Common.Utils.UtilClasses

@namespace CommonLib.Web.Source.Common.Components.MyDropDownComponent
@inherits MyDropDownBase<TProperty>
@typeparam TProperty

<CascadingValue Value="_bpParentToCascade" Name="ParentParameter">

    <MyInputGroup @ref="_inputGroup" class="my-dropdown-input-group">
        <div id="@_id" my-guid="@_guid" class="@_renderClasses" style="@_renderStyle" @attributes="@_renderAttributes">
            <div class="my-dropdown-value-and-icon-container" tabindex="0">
                @if (SelectedItem != null)
                {
                    <div class="my-dropdown-value" value="@SelectedItem.V?.Index">@SelectedItem.V?.Text</div>
                }
            </div>
            <ul class="my-dropdown-options-container">
                @if (EmptyItem.HasValue())
                {
                    <li class="my-dropdown-option" value="@(EmptyItem.V.Index?.ToString() ?? "")" @onclick="@(e => DdlOption_ClickAsync(e, EmptyItem.V.Index, _guid))">@EmptyItem.V.Text</li>
                }
                @if (_ddlItems is not null && _ddlItems.Any())
                {
                    @foreach (var item in _ddlItems.Where(i => i.Text != "None"))
                    {
                        <li class="my-dropdown-option" value="@item.Index" @onclick="@(e => DdlOption_ClickAsync(e, item.Index, _guid))">@item.Text</li>
                    }
                }
                @ChildContent
            </ul>
        </div>
        <MyInputGroupPrepend>
            <MyIcon IconType="Icon.V"></MyIcon>
        </MyInputGroupPrepend>
        <MyInputGroupAppend>
            <MyIcon IconType="IconType.From(LightIconType.ChevronDown)" SizeMode="@IconSizeMode.Contain.ToBp()" class="my-dropdown-open-icon" />
            <MyIcon IconType="IconType.From(LightIconType.ChevronUp)" SizeMode="@IconSizeMode.Contain.ToBp()" class="my-dropdown-close-icon" style="display: none" />
        </MyInputGroupAppend>
    </MyInputGroup>

</CascadingValue>