@namespace CommonLib.Web.Source.Common.Components.MyFileUploadComponent
@using CommonLib.Web.Source.Common.Converters
@using CommonLib.Web.Source.Common.Utils.UtilClasses
@using CommonLib.Source.Common.Utils.UtilClasses
@using CommonLib.Source.Common.Extensions.Collections
@using System.Threading
@using CommonLib.Source.Common.Extensions
@using CommonLib.Web.Source.Common.Components.MyButtonComponent;
@using CommonLib.Web.Source.Models
@inherits CommonLib.Web.Source.Common.Components.MyFileUploadComponent.MyFileUploadBase

<CascadingValue Value="_bpParentToCascade" Name="ParentParameter">
<CascadingValue Value="new CascadingBlazorParameter<ComponentState>(InteractivityState.V)" Name="CascadingInteractivity">

    <div id="@_id" my-guid="@Guid" class="@_renderClasses" style="@_renderStyle" @attributes="@_renderAttributes">
        <div class="my-fileupload-thumbnail-container" style="@_thumbnailContainerRenderStyle">
        </div>
        <MyButton @ref="_btnPreviewControls" Validate="false" Sizing="ButtonSizing.LineHeightQuadratic" Click="BtnPreviewControls_ClickAsync" class="my-btn-preview-controls my-d-none" />
        <div class="my-fileupload-drop-container">Drop Files here...<input type="file" class="my-fileupload-hidden-file-input" multiple="multiple" /></div>
        <div class="my-fileupload-buttons-container">
            <div class="my-fileupload-btn-choose-file-container">
                <MyButton InheritCascadedInteractivity="_inheritState" Icon="IconType.From(LightIconType.FileCirclePlus)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.Fill" class="my-btn-choose-file" />
            </div>
            <div class="my-fileupload-btn-select-all-container">
                <MyButton InheritCascadedInteractivity="_inheritState" Icon="IconType.From(LightIconType.BoxCheck)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.Quadratic" Click="BtnSelectAll_ClickAsync" PreventMultiClicks="false" class="my-btn-select-all-files" />
            </div>
            <div class="my-fileupload-btn-upload-many-container">
                <MyButton InheritCascadedInteractivity="_inheritState" Icon="IconType.From(LightIconType.CloudArrowUp)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.Quadratic" Click="BtnUploadMany_ClickAsync" class="my-btn-upload-many-files" />
            </div>
            <div class="my-fileupload-btn-pause-many-container">
                <MyButton InheritCascadedInteractivity="_inheritState" Icon="IconType.From(LightIconType.Pause)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.Quadratic" Click="BtnPauseMany_ClickAsync" class="my-btn-pause-many-files" />
            </div>
            <div class="my-fileupload-btn-resume-many-container">
                <MyButton InheritCascadedInteractivity="_inheritState" Icon="IconType.From(LightIconType.Play)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.Quadratic" Click="BtnResumeMany_ClickAsync" class="my-btn-resume-many-files" />
            </div>
            <div class="my-fileupload-btn-retry-many-container">
                <MyButton InheritCascadedInteractivity="_inheritState" Icon="IconType.From(LightIconType.RotateRight)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.Quadratic" Click="BtnRetryMany_ClickAsync"  class="my-btn-retry-many-files" />
            </div>
            <div class="my-fileupload-btn-clear-many-container">
                <MyButton InheritCascadedInteractivity="_inheritState" Icon="IconType.From(LightIconType.TrashXmark)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.Quadratic" Click="BtnClearMany_ClickAsync" class="my-btn-clear-many-files" />
            </div>
        </div>
        @if (ValidFiles.Any())
        {
            <div class="my-fileupload-progressbars-container"> @* use `@key=file` to make sure rendering knows which list element is which (it prevents restoring parameters to wrong components, i.e.: disabling `x` button in element `n` and then removing element `n` would make old element `n + 1` (now `n`) disabled after render) - ref: https://blazor-university.com/components/render-trees/optimising-using-key/ *@
                @foreach (var file in ValidFiles) 
                {
                    <div class="my-fileupload-progressbar-checkbox-container">
                        <MyCheckBox DisabledByDefault="false" Validate="false" Model="file" For="@(() => file.IsSelected)" DisplayLabel="false" @key=file></MyCheckBox>
                    </div>
                    <div class="my-fileupload-progressbar-container">
                        <MyProgressBar DisabledByDefault="false" Validate="false" Model="file" For="@(() => file.Progress)" Description="file.NameExtensionAndSize" Sizing="ProgressBarSizing.LineHeight" @key=file />
                    </div>
                    @if (file.Status == UploadStatus.NotStarted)
                    {
                        <div class="my-fileupload-btn-upload-container">
                            <MyButton DisabledByDefault="false" InheritCascadedInteractivity="true" Validate="false" Icon="IconType.From(LightIconType.CloudArrowUp)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.LineHeightQuadratic" Click="BtnUpload_ClickAsync" class="my-btn-upload-file" Model="@file" @key=file />
                        </div>
                    }
                    else if (file.Status == UploadStatus.Uploading)
                    {
                        <div class="my-fileupload-btn-pause-container">
                            <MyButton DisabledByDefault="false" InheritCascadedInteractivity="true" Validate="false" Icon="IconType.From(LightIconType.Pause)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.LineHeightQuadratic" Click="BtnPause_ClickAsync" class="my-btn-pause-file" Model="@file" @key=file />
                        </div>
                    }
                    else if (file.Status == UploadStatus.Paused)
                    {
                        <div class="my-fileupload-btn-resume-container">
                            <MyButton DisabledByDefault="false" InheritCascadedInteractivity="true" Validate="false" Icon="IconType.From(LightIconType.Play)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.LineHeightQuadratic" Click="BtnResume_ClickAsync" class="my-btn-resume-file" Model="@file" @key=file />
                        </div>
                    }
                    else if (file.Status == UploadStatus.Failed)
                    {
                        <div class="my-fileupload-btn-retry-container">
                            <MyButton DisabledByDefault="false" InheritCascadedInteractivity="true" Validate="false" Icon="IconType.From(LightIconType.RotateRight)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.LineHeightQuadratic" Click="BtnRetry_ClickAsync" class="my-btn-retry-file" Model="@file" @key=file />
                        </div>
                    }
                    else if (file.Status == UploadStatus.Finished)
                    {
                        <div class="my-fileupload-empty-container">
                        </div>
                    }
                    <div class="my-fileupload-btn-clear-container">
                        <MyButton DisabledByDefault="false" InheritCascadedInteractivity="true" Validate="false" Icon="IconType.From(LightIconType.XmarkLarge)" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.LineHeightQuadratic" Click="BtnClear_ClickAsync" class="my-btn-remove-file" Model="@file" @key=file />
                    </div>
                }
            </div>
        }
    </div>

</CascadingValue>
</CascadingValue>