@using CommonLib.Source.Common.Extensions
@using CommonLib.Source.Common.Utils.UtilClasses
@using CommonLib.Web.Source.Common.Converters
@using CommonLib.Web.Source.Common.Utils.UtilClasses

@namespace CommonLib.Web.Source.Common.Components.MyButtonComponent
@inherits MyButtonBase

<CascadingValue Value="_bpParentToCascade" Name="ParentParameter">

    @if (InteractionState.ParameterValue is not null)
    {
        @*Logger.For<MyButton>().Info($"[{Icon.ParameterValue}] Rendering: State = {State.ParameterValue}");*@
        @* Icons are physically swapped with interaction stateee so they need to have stateee set explicitly not to remain disabled. Swapped icon would always have initial statee null that would always be corrected on parameters set to disabled because parent didn't change | done in MyComponentbase' *@
        <CascadingValue Value="_bpBtn">
            @if (InteractionState.ParameterValue == ComponentState.Enabled)
            {
                <button id="@_id" my-guid="@_guid" class="@_renderClasses" style="@_renderStyle" @attributes="@_renderAttributes" @onclick="@Button_ClickAsync" @onclick:preventDefault>
                    @if (Icon.ParameterValue != null && IconPlacement.ParameterValue == ButtonIconPlacement.Left)
                    {
                        <MyIcon Color="none" IconType="@Icon.ParameterValue" @ref="IconBefore"></MyIcon>
                    }
                    @if (!Value.ParameterValue.IsNullOrWhiteSpace())
                    {
                        <MyButtonDescription>@Value.ParameterValue</MyButtonDescription>
                    }
                    @if (Icon.ParameterValue != null && IconPlacement.ParameterValue == ButtonIconPlacement.Right)
                    {
                        <MyIcon Color="none" IconType="@Icon.ParameterValue" @ref="IconAfter"></MyIcon>
                    }
                    @ChildContent
                </button>
            }
            else if (InteractionState.ParameterValue == ComponentState.Disabled)
            {
                <button id="@_id" my-guid="@_guid" class="@_renderClasses" style="@_renderStyle" @attributes="@_renderAttributes" disabled>
                    @if (Icon.ParameterValue != null && IconPlacement.ParameterValue == ButtonIconPlacement.Left)
                    {
                        <MyIcon Color="none" IconType="@Icon.ParameterValue" @ref="IconBefore"></MyIcon>
                    }
                    @if (!Value.ParameterValue.IsNullOrWhiteSpace())
                    {
                        <MyButtonDescription>@Value.ParameterValue</MyButtonDescription>
                    }
                    @if (Icon.ParameterValue != null && IconPlacement.ParameterValue == ButtonIconPlacement.Right)
                    {
                        <MyIcon Color="none" IconType="@Icon.ParameterValue" @ref="IconAfter"></MyIcon>
                    }
                    @ChildContent
                </button>
            }
            else if (InteractionState.ParameterValue == ComponentState.Loading)
            {
                <button id="@_id" my-guid="@_guid" class="@_renderClasses" style="@_renderStyle" @attributes="@_renderAttributes" disabled>
                    @if (Icon.ParameterValue != null && IconPlacement.ParameterValue == ButtonIconPlacement.Left)
                    {
                        <MyIcon Color="none" IconType="@Icon.ParameterValue" @ref="IconBefore"></MyIcon>
                    }
                    @if (!Value.ParameterValue.IsNullOrWhiteSpace())
                    {
                        <MyButtonDescription>@Value.ParameterValue</MyButtonDescription>
                    }
                    @if (Icon.ParameterValue != null && IconPlacement.ParameterValue == ButtonIconPlacement.Right)
                    {
                        <MyIcon Color="none" IconType="@Icon.ParameterValue" @ref="IconAfter"></MyIcon>
                    }
                    @ChildContent
                    <MyImage Path="@("~/images/content-loader.gif".ToBp())" class="my-btn-loader" style="padding-top: 0"></MyImage>
                </button>
            }
        </CascadingValue>
    }

</CascadingValue>