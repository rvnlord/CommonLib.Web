@using CommonLib.Source.Common.Converters
@using CommonLib.Source.Common.Extensions
@using static Web.Source.Common.Components.StylesConfig
@using static Web.Source.AspNetLibConfig

@inherits MyComponentStylesBase

<style class="@_renderClasses" my-guid="@_guid">

    /* TEST */
    /*div[class^='my-col'], div[class*=' my-col'] {
        box-shadow: inset 0 0 0 1px rgb(255, 104, 104);
    }*/

    .my-container {
        display: flex;
        flex-flow: row wrap;
        flex-wrap: wrap;
        justify-content: left;
        padding: @HalfGutter.Px();
        position: relative;
        box-sizing: border-box;
    }

    .my-row {
        display: flex;
        flex-flow: row wrap;
        flex-wrap: wrap;
        justify-content: left;
        padding: 0;
        position: relative;
        box-sizing: border-box;
        width: 100%;
    }

    .my-col {
        flex: 1 0 calc(100% - @Gutter.Px());
        margin: @HalfGutter.Px();
        max-width: calc(100% - @Gutter.Px());
        position: relative;
        box-sizing: border-box;
    }

    .my-col-no-gutter {
        flex: 1 0 calc(100% - @Gutter.Px() );
        margin: 0;
        max-width: calc(100% - @Gutter.Px() );
        position: relative;
        box-sizing: border-box;
    }

    @for (double i = 1; i <= ColsNo; i++)
    {
        var colWidth = (i / 12 * 100).Round(8).ToStringInvariant();
        @:.my-col-@i {
        @:    flex: 0 0 calc(@(colWidth)% - @Gutter.Px());
        @:    margin: @HalfGutter.Px();
        @:    max-width: calc(@(colWidth)% - @Gutter.Px());
        @:    position: relative;
        @:    box-sizing: border-box;
        @:}
    }

    @for (double i = 1; i <= ColsNo; i++)
    {
        var colWidth = (i / 12 * 100).Round(8).ToStringInvariant();
        @:.my-col-no-gutter-@i {
        @:    flex: 0 0 calc(@(colWidth)% - @Gutter.Px());
        @:    margin: 0;
        @:    max-width: calc(@(colWidth)% - @Gutter.Px());
        @:    position: relative;
        @:    box-sizing: border-box;
        @:}
    }

    @for (double i = 1; i <= ColsNo; i++)
    {
        var colWidth = (i / 12 * 100).Round(8).ToStringInvariant();
        @:.my-offset-@i {
        @:    margin-left: calc(@(colWidth)% + @HalfGutter.Px());
        @:}
    }

    @for (double i = 1; i <= ColsNo; i++)
    {
        var colWidth = (i / 12 * 100).Round(8).ToStringInvariant();
        @:.my-offset-no-gutter-@i {
        @:    margin-left: calc(@(colWidth)%);
        @:}
    }

    @for (var i = 50; i <= FixedColMaxSize; i += FixedColStep)
    {
        @:.my-col-@(i.Px()) {
        @:    flex: 0 0 @i.Px();
        @:    margin: @HalfGutter.Px();
        @:    max-width: @i.Px();
        @:    position: relative;
        @:    box-sizing: border-box;
        @:}
    }

    @for (var i = 50; i <= FixedColMaxSize; i += FixedColStep)
    {
        @:.my-col-no-gutter-@(i.Px()) {
        @:    flex: 0 0 @i.Px();
        @:    margin: 0;
        @:    max-width: @i.Px();
        @:    position: relative;
        @:    box-sizing: border-box;
        @:}
    }

    .my-col-auto {
        flex: 1 0 0;
        margin: @HalfGutter.Px();
        position: relative;
        box-sizing: border-box;
    }

    .my-col-no-gutter-auto {
        flex: 1 0 0;
        margin: 0;
        position: relative;
        box-sizing: border-box;
    }

    @foreach (var (name, size) in Devices)
    {
        @: @($"@media (min-width: {size.Px()}) {{")
            @for (double i = 1; i <= ColsNo; i++)
            {
                var colWidth = (i / 12 * 100).Round(8).ToStringInvariant();
                @:.my-col-@name@("-")@i {
                @:    flex: 0 0 calc(@(colWidth)% - @Gutter.Px());
                @:    margin: @HalfGutter.Px();
                @:    max-width: calc(@(colWidth)% - @Gutter.Px());
                @:    position: relative;
                @:    box-sizing: border-box;
                @:}
            }

            @for (var i = 50; i <= FixedColMaxSize; i += FixedColStep)
            {
                @:.my-col-@name@("-")@(i.Px()) {
                @:    flex: 0 0 @i.Px();
                @:    margin: @HalfGutter.Px();
                @:    max-width: @i.Px();
                @:    position: relative;
                @:    box-sizing: border-box;
                @:}
            }

            @:.my-col-@name@("-")auto {
            @:    flex: 1 0 0;
            @:    margin: @HalfGutter.Px();
            @:    position: relative;
            @:    box-sizing: border-box;
            @:}

            @for (double i = 1; i <= ColsNo; i++)
            {
                var colWidth = (i / 12 * 100).Round(8).ToStringInvariant();
                @:.my-col-@name@("-no-gutter-")@i {
                @:    flex: 0 0 calc(@(colWidth)%);
                @:    margin: 0;
                @:    max-width: calc(@(colWidth)%);
                @:    position: relative;
                @:    box-sizing: border-box;
                @:}
            }

            @:.my-col-@name@("-no-gutter-")auto {
            @:    flex: 1 0 0;
            @:    margin: 0;
            @:    position: relative;
            @:    box-sizing: border-box;
            @:}
        @: @("}}")
    }

    @foreach (var (name, size) in Devices)
    {
        @: @($"@media (min-width: {size.Px()}) {{")
            @for (double i = 1; i <= ColsNo; i++)
            {
                var colWidth = (i / 12 * 100).Round(8).ToStringInvariant();
                @:.my-offset-@name@("-")@i {
                @:    margin-left: calc(@(colWidth)% + @HalfGutter.Px());
                @:}
            }
        @: @("}}")

        @: @($"@media (min-width: {size.Px()}) {{")
            @for (double i = 1; i <= ColsNo; i++)
            {
                var colWidth = (i / 12 * 100).Round(8).ToStringInvariant();
                @:.my-offset-@name@("-no-gutter-")@i {
                @:    margin-left: calc(@(colWidth)%);
                @:}
            }
        @: @("}}")
    }

    @foreach (var (device, breakpoint) in Devices)
    {
        if (device != "xs")
        {
            @($"@media (min-width: {breakpoint.Px()}) {{")
        }

        foreach (var order in Enumerable.Range(-1, 12))
        {
            <text>
                @($".my-order{(device == "xs" ? "" : $"-{device}")}-{order} {{")
                @($"order: {order};")
                @($"}}")
            </text>
        }

        if (device != "xs")
        {
            @($"}}")
        }
    }

    .my-container.no-gutter,
    .my-container-no-gutter {
        margin: @((-Gutter).Px());
    }

    .css-grid-example-item {
        color: white;
        background-color: rgb(255, 0, 0);
        text-align: center;
        height: 100%;
    }

</style>
