@page "/admin/adduser/"

@using CommonLib.Source.Common.Extensions
@using CommonLib.Source.Common.Utils.UtilClasses
@using CommonLib.Web.Source.Common.Converters
@using CommonLib.Web.Source.Common.Utils.UtilClasses
@using CommonLib.Web.Source.ViewModels.Account
@using static CommonLib.Web.Source.Common.Components.StylesConfig
@using static CommonLib.Web.Source.Models.BlazorParameter
@using CommonLib.Source.Common.Converters

@inherits AddUserBase

<CascadingValue Value="_bpParentToCascade" Name="ParentParameter">

    @if (HasAuthenticationStatus(AuthStatus.NotChecked))
    {
        <div class="no-page-error">
            <div class="spinner-container">
                <div class="spinner"></div>
                <div class="spinner-message">Authorizing...</div>
            </div>
        </div>
    }
    else if (!IsAuthorized) // show nothing if null, not checked
    {
        <div class="no-page-error">You are not authorized to access this page</div>
    }
    else if (IsAuthorized)
    {
        <MyEditForm @ref="_editForm" EditContext="_editContext" style="margin: 0 5px 5px 5px;">
            <MyFluentValidator @ref="_validator" />
            <MyCssGrid Padding="Gutter.Px()" Gap="Gutter.Px()"
                   XLTemplate="@(new CssGridLayout("2fr 3fr 7fr", "repeat(auto-fit, minmax(0, max-content))"))"
                   LGTemplate="@(new CssGridLayout("3fr 4fr 5fr", "repeat(auto-fit, minmax(0, max-content))"))"
                   SMTemplate="@(new CssGridLayout("6fr 6fr", "repeat(auto-fit, minmax(0, max-content))"))"
                   Template="@(new CssGridLayout("12fr", "repeat(auto-fit, minmax(0, max-content))"))"
                   style="background: #101010;">

                <MyCssGridItem Area="CssGridArea.C1SpanAll" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom">
                    <h3>Admin Edit</h3>
                    <hr class="my-mt-10px" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1SpanAll">
                    <MyButton Click="BtnBackToListUsers_ClickAsync" Icon="IconType.From(LightIconType.ArrowLeft)" Styling="ButtonStyling.Secondary" Sizing="ButtonSizing.Quadratic" class="my-btn-back-to-list-users" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _adminAddUserVM.UserName)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyTextInput Icon="IconType.From(LightIconType.User)" For="@(() => _adminAddUserVM.UserName)" SyncPaddingGroup="edit-panel" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _adminAddUserVM.UserName)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _adminAddUserVM.Avatar)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyFileUpload For="@(() => _adminAddUserVM.PotentialAvatars)"
                              PreviewFor="@BP(() => _adminAddUserVM.Avatar)"
                              PredefinedSaveUrl="PredefinedSaveUrlKind.SaveTemporaryAvatar" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _adminAddUserVM.PotentialAvatars)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _adminAddUserVM.Email)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyTextInput Icon="IconType.From(LightIconType.Envelope)" For="@(() => _adminAddUserVM.Email)" SyncPaddingGroup="edit-panel" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _adminAddUserVM.Email)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _adminAddUserVM.Password)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyPasswordInput For="@(() => _adminAddUserVM.Password)" SyncPaddingGroup="edit-panel" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _adminAddUserVM.Password)" />
                </MyCssGridItem>

                <MyCssGridItem @ref="_giRoles" Area="CssGridArea.C1" LGArea="CssGridArea.C2">
                    <span class="my-mb-10px" style="color: blue; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; display: block;">Roles:</span>
                    @if (!_roles.Any())
                    {
                        <span class="my-ml-10px" style="color: #ff3333; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; display: block;">&lt; No Roles &gt;</span>
                    }
                    else
                    {
                        <div class="my-ml-10px" style="display: flex; flex-direction: column; flex-wrap: wrap; gap: 10px">
                            @foreach (var role in _roles.OrderBy(r => r.Name))
                            {
                                <MyCheckBox Value="role.In(_adminAddUserVM.Roles)" Check="(s, e, t) => CbRole_CheckedAsync(s, role, s.Value)" Description="@role.Name" key=@role></MyCheckBox>
                            }
                        </div>
                    }
                </MyCssGridItem>

                <MyCssGridItem @ref="_giClaims" Area="CssGridArea.C2" LGArea="CssGridArea.C3">
                    <span class="my-mb-10px" style="color: green; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; display: block;">Claims:</span>
                    @if (!_claims.Any())
                    {
                        <span class="my-ml-10px" style="color: #ff3333; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; display: block;">&lt; No Claims &gt;</span>
                    }
                    else
                    {
                        <div class="my-ml-10px" style="display: flex; flex-direction: column; flex-wrap: wrap; gap: 10px">
                            @foreach (var claim in _claims.OrderBy(c => c.Name))
                            {
                                <MyCheckBox Value="claim.In(_adminAddUserVM.Claims)" Check="(s, e, t) => CbClaim_CheckedAsync(s, claim, s.Value)" Description="@claim.Name" key=@claim></MyCheckBox>
                            }
                        </div>
                    }
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1SpanAll" LGArea="CssGridArea.C2SpanAll">
                    <MyCssGrid Gap="Gutter.Px()"
                           Template="@(new CssGridLayout("1fr", "auto"))"
                           LGTemplate="@(new CssGridLayout("max-content", "auto"))">
                        <MyCssGridItem>
                            <MyButton Value="@("Add User".ToBp())" SubmitsForm="true" Click="BtnAddUser_ClickAsync" Icon="IconType.From(LightIconType.UserPlus)" Styling="ButtonStyling.Primary" Sizing="ButtonSizing.Fill" IconPlacement="ButtonIconPlacement.Right" class="my-btn-save" />
                        </MyCssGridItem>
                    </MyCssGrid>
                </MyCssGridItem>

            </MyCssGrid>
        </MyEditForm>
    }

</CascadingValue>