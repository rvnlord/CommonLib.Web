@page "/Account/Edit/"

@using CommonLib.Web.Source.Common.Utils.UtilClasses
@using CommonLib.Web.Source.Common.Converters
@using CommonLib.Web.Source.ViewModels.Account
@using CommonLib.Web.Source.Common.Components.MyInputComponent
@using CommonLib.Source.Common.Converters
@using CommonLib.Source.Common.Utils.UtilClasses
@using CommonLib.Source.Common.Extensions
@using static CommonLib.Web.Source.Common.Components.StylesConfig
@using static CommonLib.Web.Source.Models.BlazorParameter
@using System.Threading

@inherits EditBase

<CascadingValue Value="_bpParentToCascade" Name="ParentParameter">

    @if (HasAuthenticationStatus(AuthStatus.NotChecked))
    {
        <div class="no-page-error">
            <div class="spinner-container">
                <div class="spinner"></div>
                <div class="spinner-message">Authorizing...</div>
            </div>
        </div>
    }
    else if (HasAuthenticationStatus(AuthStatus.NotAuthenticated)) // show nothing if null, not checked
    {
        <div class="no-page-error">You need to be logged in to access this page</div>
    }
    else if (HasAuthenticationStatus(AuthStatus.Authenticated))
    {
        <MyEditForm @ref="_editForm" EditContext="_editContext" style="margin: 0 5px 5px 5px;">
            <MyFluentValidator @ref="_validator" />
            <MyCssGrid 
                Padding="Gutter.Px()" Gap="Gutter.Px()" 
                XLTemplate="@(new CssGridLayout("2fr 3fr 7fr", "repeat(auto-fit, minmax(0, max-content))"))"
                LGTemplate="@(new CssGridLayout("3fr 4fr 5fr", "repeat(auto-fit, minmax(0, max-content))"))"
                SMTemplate="@(new CssGridLayout("6fr 6fr", "repeat(auto-fit, minmax(0, max-content))"))"
                Template="@(new CssGridLayout("12fr", "repeat(auto-fit, minmax(0, max-content))"))"
                style="background: #101010;">

                <MyCssGridItem Area="CssGridArea.C1SpanAll" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom">
                    <h3>Edit</h3>
                    <hr class="my-mt-10px" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _editUserVM.Id)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyTextInput Icon="IconType.From(LightIconType.IdBadge)" InteractionState="ComponentState.ForceDisabled" For="@(() => _editUserVM.IdString)" SyncPaddingGroup="edit-panel" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _editUserVM.Id)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _editUserVM.UserName)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyTextInput Icon="IconType.From(LightIconType.User)" For="@(() => _editUserVM.UserName)" SyncPaddingGroup="edit-panel" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _editUserVM.UserName)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _editUserVM.Avatar)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyFileUpload For="@(() => _editUserVM.PotentialAvatars)" 
                                  PreviewFor="@BP(() => _editUserVM.Avatar)" 
                                  PredefinedSaveUrl="PredefinedSaveUrlKind.SaveTemporaryAvatar" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _editUserVM.PotentialAvatars)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _editUserVM.Email)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyTextInput Icon="IconType.From(LightIconType.Envelope)" For="@(() => _editUserVM.Email)" SyncPaddingGroup="edit-panel" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _editUserVM.Email)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _editUserVM.OldPassword)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyPasswordInput For="@(() => _editUserVM.OldPassword)" SyncPaddingGroup="edit-panel" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _editUserVM.OldPassword)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _editUserVM.NewPassword)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyPasswordInput For="@(() => _editUserVM.NewPassword)" SyncPaddingGroup="edit-panel" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _editUserVM.NewPassword)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                    <MyLabel For="@(() => _editUserVM.ConfirmNewPassword)" Align="@HorizontalAlignment.Right" />
                </MyCssGridItem>
                <MyCssGridItem>
                    <MyPasswordInput For="@(() => _editUserVM.ConfirmNewPassword)" SyncPaddingGroup="edit-panel" />
                </MyCssGridItem>
                <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                    <MyValidationMessage For="@(() => _editUserVM.ConfirmNewPassword)" />
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1SpanAll" LGArea="CssGridArea.C2SpanAll">
                    <MyCssGrid Gap="Gutter.Px()" 
                        Template="@(new CssGridLayout("1fr", "auto"))"
                        LGTemplate="@(new CssGridLayout("max-content", "auto"))">
                        <MyCssGridItem>  
                            <MyButton Value="@("Save Profile".ToBp())" SubmitsForm="true" OnClick="BtnSubmit_ClickAsync" Icon="IconType.From(LightIconType.Save)" Styling="ButtonStyling.Primary" Sizing="ButtonSizing.Fill" IconPlacement="ButtonIconPlacement.Right" class="my-btn-save" />
                        </MyCssGridItem>
                    </MyCssGrid>
                </MyCssGridItem>

                <MyCssGridItem Area="CssGridArea.C1SpanAll">
                    <h4>External Login Providers</h4>
                </MyCssGridItem>

                @if (!_editUserVM.ExternalLogins.Any())
                {
                    <MyCssGridItem Area="CssGridArea.C1SpanAll" class="no-providers-message">
                        No External Login providers Defined
                    </MyCssGridItem>
                }
                else
                {
                    foreach (var externalLogin in _editUserVM.ExternalLogins)
                    {
                        <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyNegatedDefaultBottom" SMGap="CssGridAreaGap.Auto">
                            <MyLabel Value="@externalLogin.LoginProvider.Append(":")" TProperty="string" Align="@HorizontalAlignment.Right" @key=externalLogin />
                        </MyCssGridItem>
                        <MyCssGridItem>
                            <MyTextInput Icon="IconType.From(externalLogin.LoginProvider.ToEnum<BrandsIconType>())" For="@(() => externalLogin.ExternalUserName)" Placeholder="< not fetched >" SyncPaddingGroup="edit-panel" InteractionState="ComponentState.ForceDisabled" @key=externalLogin />
                        </MyCssGridItem>
                        <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                            <MyCssGrid Gap="Gutter.Px()" Template="@(new CssGridLayout("1fr", "auto"))" LGTemplate="@(new CssGridLayout("150px", "auto"))">
                                <MyCssGridItem>  
                                    @if (!externalLogin.Connected)
                                    {
                                        <MyButton Value="@("Connect".ToBp())" Model="externalLogin" Click="BtnConnectExternalLogin_ClickAsync" Icon="IconType.From(externalLogin.LoginProvider.ToEnum<BrandsIconType>())" Styling="ButtonStyling.Success" Sizing="ButtonSizing.Fill" class="@($"my-btn-connect-{externalLogin.LoginProvider.ToLower()}")" IconPlacement="ButtonIconPlacement.Right" @key=externalLogin />
                                    }
                                    else 
                                    {
                                        <MyButton Value="@("Disconnect".ToBp())" Model="externalLogin" Click="BtnDisconnectExternalLogin_ClickAsync" Icon="IconType.From(externalLogin.LoginProvider.ToEnum<BrandsIconType>())" Styling="ButtonStyling.Danger" Sizing="ButtonSizing.Fill" class="@($"my-btn-diconnect-{externalLogin.LoginProvider.ToLower()}")" IconPlacement="ButtonIconPlacement.Right" @key=externalLogin />
                                    }
                                </MyCssGridItem>
                            </MyCssGrid>
                        </MyCssGridItem>
                    }
                }
                
            </MyCssGrid>
        </MyEditForm>
    }

</CascadingValue>