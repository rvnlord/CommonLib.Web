@page "/account/login/"

@using CommonLib.Web.Source.Common.Converters
@using CommonLib.Web.Source.Common.Utils.UtilClasses
@using CommonLib.Source.Common.Converters
@using CommonLib.Source.Common.Extensions.Collections
@using CommonLib.Source.Common.Utils.UtilClasses
@using CommonLib.Web.Source.Common.Components.MyBadgeComponent
@using CommonLib.Web.Source.ViewModels.Account
@using Telerik.Blazor
@using Telerik.Blazor.Components

@inherits LoginBase

<CascadingValue Value="_bpParentToCascade" Name="ParentParameter">

    @if (HasAnyAuthenticationStatus(AuthStatus.NotAuthenticated, AuthStatus.NotChecked))
    {
        <MyEditForm @ref="_editForm" EditContext="_editContext" OnValidSubmit="FormLogin_ValidSubmitAsync">
            <div class="my-container">
                <div class="my-row">

                    <div class="my-col-md-7 my-col-12">
                        <div class="my-container my-container-no-gutter my-login-modal-left-panel-container">
                            <div class="my-col-12">
                                <div class="my-container my-container-no-gutter" style="margin-bottom: 0; box-shadow: inset 0 -1px 0 0 #646464">
                                    <div class="my-col-12">
                                        <h4>Local Login:</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="my-col-12">
                                <div class="my-container my-container-no-gutter">
                                    <div class="my-row">
                                        <div class="my-col-md-4 my-col-12 my-mb-0 my-mb-md-5px">
                                            <MyLabel For="@(() => _loginUserVM.UserName)" />
                                        </div>
                                        <div class="my-col-md-8 my-col-12 my-mt-0 my-mt-md-5px">
                                            <MyTextInput For="@(() => _loginUserVM.UserName)" SyncPaddingGroup="login-modal">
                                                <MyInputGroupPrepend>
                                                    <MyIcon IconType="IconType.From(LightIconType.UserLock)"></MyIcon>
                                                </MyInputGroupPrepend>
                                            </MyTextInput>
                                        </div>
                                    </div>
                                    <div class="my-row">
                                        <div class="my-col-md-4 my-col-12 my-mb-0 my-mb-md-5px">
                                            <MyLabel For="@(() => _loginUserVM.Password)"></MyLabel>
                                        </div>
                                        <div class="my-col-md-8 my-col-12 my-mt-0 my-mt-md-5px">
                                            <MyPasswordInput For="@(() => _loginUserVM.Password)" SyncPaddingGroup="login-modal"></MyPasswordInput>
                                        </div>
                                    </div>
                                    <div class="my-row">
                                        <div class="my-col-md-8 my-col-12 my-offset-md-4">
                                            <MyCheckBox For="@(() => _loginUserVM.RememberMe)"></MyCheckBox>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="my-col-12">
                                <div class="my-container my-container-no-gutter" style="box-shadow: inset 0 1px 0 0 #646464; margin-top: 0;">
                                    <div class="my-offset-md-4 my-col-md-4 my-col-12">
                                        <MyButton Value="@("Sign In".ToBp())" Icon="IconType.From(LightIconType.SignIn)" Styling="ButtonStyling.Primary" Sizing="ButtonSizing.Fill" OnClick="BtnSignIn_ClickAsync"></MyButton>
                                    </div>
                                    <div class="my-col-md-4 my-col-12">
                                        <MyButton Value="@("Sign Up".ToBp())" Icon="IconType.From(LightIconType.Edit)" Styling="ButtonStyling.Secondary" Sizing="ButtonSizing.Fill" OnClick="BtnSignUp_ClickAsync"></MyButton>
                                    </div>
                                    <div class="my-col-md-4 my-col-12 my-order-md-0 my-order-1">
                                        <MyButton Value="@("Dismiss".ToBp())" Icon="IconType.From(LightIconType.TimesHexagon)" Styling="ButtonStyling.Danger" Sizing="ButtonSizing.Fill" class="my-close"></MyButton>
                                    </div>
                                    <div class="my-col-md-8 my-col-12">
                                        <MyButton Value="@("Reset Password".ToBp())" Icon="IconType.From(LightIconType.Bells)" Styling="ButtonStyling.Secondary" Sizing="ButtonSizing.Fill" OnClick="BtnResetPassword_ClickAsync"></MyButton>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="my-col-md-5 my-col-12">
                        <div class="my-container my-container-no-gutter">
                            <div class="my-col-12">
                                <div class="my-container my-container-no-gutter my-login-modal-right-panel-title-container">
                                    <div class="my-col-12">
                                        <h4>External Login:</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="my-col-12">
                                <div class="my-container my-container-no-gutter">
                                    @if (_loginUserVM.ExternalLogins.Count == 0)
                                    {
                                        <div class="my-col-12">
                                            <div>No External Login providers Defined</div>
                                        </div>
                                    }
                                    else
                                    {
                                        foreach (var provider in _loginUserVM.ExternalLogins)
                                        {
                                            <div class="my-col-4">
                                                <MyButton Value="provider.DisplayName" Icon="IconType.From(provider.DisplayName.ToEnum<BrandsIconType>())" Styling="ButtonStyling.Success" Sizing="ButtonSizing.FillAndDoubleHeight" OnClick="@(e => BtnExternalLogin_ClickAsync(e, provider.Name))"></MyButton>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </MyEditForm>
    }
    else if (HasAuthenticationStatus(AuthStatus.Authenticated))
    {
        <MyCssGrid 
            Padding="StylesConfig.Gutter.Px()" 
            Gap="StylesConfig.Gutter.Px()" 
            Template="@(new CssGridLayout("150px auto", "repeat(2, auto)"))">
            <MyCssGridItem>
                <div>
                    <div class="logged-user-no-avatar-container">
                        <MyIcon IconType="IconType.From(LightIconType.User)" Color="blue" SizeMode="@IconSizeMode.Contain" class="logged-user-no-avatar"></MyIcon>
                    </div>
                </div>
            </MyCssGridItem>
            <MyCssGridItem>
                <MyCssGrid
                    Gap="StylesConfig.Gutter.Px()" 
                    Template="@(new CssGridLayout("auto", "repeat(3, max-content)"))">
                    <MyCssGridItem Area="@(new CssGridArea(1, 1))">
                        <div>
                            <div class="logged-user-username">
                                @AuthenticatedUser.UserName
                            </div>
                            <div class="logged-user-login-time">
                                last login: @AuthenticatedUser.LoginTimestamp.ToLocal().ToTimeDateString()
                            </div>
                        </div>
                    </MyCssGridItem>
                    @{
                        //var testItems = Enumerable.Range(1, 10).Select(i => "TestItem" + i).ToArray();
                        var roles = AuthenticatedUser.Roles.Select(r => r.Name).ToArray();
                        var claims = AuthenticatedUser.Claims.Select(r => r.Name).ToArray();
                    }
                    <MyCssGridItem Area="@(new CssGridArea(1, 2))">
                        <div class="logged-user-roles-container">
                            @if (!roles.Any()) 
                            {
                                <div class="logged-user-no-roles">(no roles assigned)</div>
                            }
                            else
                            {
                                <div class="logged-user-roles">
                                    @foreach (var role in roles)
                                    {
                                        <MyBadge Badge="@BadgeKind.Primary">@role</MyBadge>
                                    }
                                </div>
                            }
                        </div>
                    </MyCssGridItem>
                    <MyCssGridItem Area="@(new CssGridArea(1, 3))">
                        <div class="logged-user-claims-container">
                            @if (!claims.Any()) 
                            {
                                <div class="logged-user-no-claims">(no claims assigned)</div>
                            }
                            else
                            {
                                <div class="logged-user-claims">
                                    @foreach (var claim in claims)
                                    {
                                        <MyBadge Badge="@BadgeKind.Info">@claim</MyBadge>
                                    }
                                </div>
                            }                            
                        </div>
                    </MyCssGridItem>
                </MyCssGrid>
            </MyCssGridItem>
            <MyCssGridItem Area="@(new CssGridArea(1, 2, 2))">
                <MyCssGrid
                    Gap="StylesConfig.Gutter.Px()" 
                    Template="@(new CssGridLayout("repeat(2, 1fr)", "auto"))"
                    MDTemplate="@(new CssGridLayout("repeat(2, max-content)", "auto"))"
                    class="logged-user-actions">
                    <MyCssGridItem>  
                        <MyButton Value="@("Sign Out".ToBp())" Icon="IconType.From(LightIconType.SignOut)" Styling="ButtonStyling.Danger" Sizing="ButtonSizing.Fill" OnClick="BtnSignOut_ClickAsync"></MyButton>
                    </MyCssGridItem>
                    <MyCssGridItem>  
                        <MyButton Value="@("Edit".ToBp())" Icon="IconType.From(LightIconType.Edit)" Styling="ButtonStyling.Primary" Sizing="ButtonSizing.Fill" OnClick="BtnEdit_ClickAsync"></MyButton>
                    </MyCssGridItem>
                </MyCssGrid>
            </MyCssGridItem>
        </MyCssGrid>
    }

</CascadingValue>
