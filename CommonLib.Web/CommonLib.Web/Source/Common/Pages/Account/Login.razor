@page "/account/login/"

@using CommonLib.Web.Source.Common.Converters
@using CommonLib.Web.Source.Common.Utils.UtilClasses
@using CommonLib.Source.Common.Converters
@using CommonLib.Source.Common.Extensions.Collections
@using CommonLib.Source.Common.Utils.UtilClasses
@using CommonLib.Web.Source.Common.Components.MyBadgeComponent
@using CommonLib.Web.Source.ViewModels.Account
@using Telerik.Blazor
@using Telerik.Blazor.Components
@using static CommonLib.Web.Source.Common.Components.StylesConfig
@using System.Threading
@using SixLabors.ImageSharp

@inherits LoginBase

<CascadingValue Value="_bpParentToCascade" Name="ParentParameter">

    @if (HasAnyAuthenticationStatus(AuthStatus.NotAuthenticated, AuthStatus.NotChecked))
    {
        <MyEditForm @ref="_editForm" EditContext="_editContext" OnValidSubmit="FormLogin_ValidSubmitAsync">
            <MyCssGrid Padding="0.Px()" Gap="0.Px()"
                Template="@(new CssGridLayout("4fr", "repeat(3, auto)"))"
                MDTemplate="@(new CssGridLayout("4fr 4fr", "repeat(2, auto)"))"
                LGTemplate="@(new CssGridLayout("4fr 4fr 4fr", "auto"))">

                <MyCssGridItem class="my-login-modal-left-panel-container">
                    <MyCssGrid Template="@(new CssGridLayout("1fr", "repeat(2, auto)"))">

                        <MyCssGridItem class="my-login-modal-left-panel-title-container my-modal-header">
                            Local Login:
                        </MyCssGridItem>

                        <MyCssGridItem class="my-login-modal-left-panel-body-container">
                            <MyCssGrid Template="@(new CssGridLayout("auto", "repeat(2, auto)"))">

                                <MyCssGridItem class="my-modal-body">
                                    <MyCssGrid Padding="@Gutter.Px()" Gap="@Gutter.Px()" Template="@(new CssGridLayout("auto", "repeat(3, auto)"))">

                                        <MyCssGridItem>
                                            <MyTextInput For="@(() => _loginUserVM.UserName)" SyncPaddingGroup="login-modal">
                                                <MyInputGroupPrepend>
                                                    <MyIcon IconType="IconType.From(LightIconType.UserLock)"></MyIcon>
                                                </MyInputGroupPrepend>
                                            </MyTextInput>
                                        </MyCssGridItem>

                                        <MyCssGridItem>
                                            <MyPasswordInput For="@(() => _loginUserVM.Password)" SyncPaddingGroup="login-modal"></MyPasswordInput>
                                        </MyCssGridItem>

                                        <MyCssGridItem>
                                            <MyCheckBox For="@(() => _loginUserVM.RememberMe)"></MyCheckBox>
                                        </MyCssGridItem>

                                    </MyCssGrid>
                                </MyCssGridItem>

                                <MyCssGridItem class="my-modal-footer">
                                    <MyCssGrid Padding="@Gutter.Px()" Gap="@Gutter.Px()" Template="@(new CssGridLayout("repeat(2, auto)", "repeat(2, auto)"))">

                                        <MyCssGridItem>
                                            <MyButton Value="@("Sign In".ToBp())" Icon="IconType.From(LightIconType.SignIn)" Styling="ButtonStyling.Primary" Sizing="ButtonSizing.Fill" OnClick="BtnSignIn_ClickAsync"></MyButton>
                                        </MyCssGridItem>

                                        <MyCssGridItem>
                                            <MyButton Value="@("Sign Up".ToBp())" Icon="IconType.From(LightIconType.Edit)" Styling="ButtonStyling.Secondary" Sizing="ButtonSizing.Fill" OnClick="BtnSignUp_ClickAsync"></MyButton>
                                        </MyCssGridItem>

                                        <MyCssGridItem>
                                            <MyButton Value="@("Reset".ToBp())" Icon="IconType.From(LightIconType.Bells)" Styling="ButtonStyling.Secondary" Sizing="ButtonSizing.Fill" OnClick="BtnResetPassword_ClickAsync"></MyButton>
                                        </MyCssGridItem>

                                        <MyCssGridItem>
                                            <MyButton Value="@("Dismiss".ToBp())" Icon="IconType.From(LightIconType.TimesHexagon)" Styling="ButtonStyling.Danger" Sizing="ButtonSizing.Fill" class="my-close"></MyButton>
                                        </MyCssGridItem>

                                    </MyCssGrid>
                                </MyCssGridItem>

                            </MyCssGrid>
                        </MyCssGridItem>

                    </MyCssGrid>
                </MyCssGridItem>

                <MyCssGridItem class="my-login-modal-mid-panel-container">
                    <MyCssGrid Template="@(new CssGridLayout("1fr", "repeat(2, auto)"))">

                        <MyCssGridItem class="my-login-modal-mid-panel-title-container my-modal-header">
                            External Login:
                        </MyCssGridItem>

                        <MyCssGridItem class="my-login-modal-mid-panel-body-container">
                            @if (!_loginUserVM.ExternalLogins.Any())
                            {
                                <MyCssGrid Padding="@Gutter.Px()" Gap="@Gutter.Px()" Template="@(new CssGridLayout())">
                                    <MyCssGridItem class="no-providers-message">
                                        No External Login providers Defined
                                    </MyCssGridItem>
                                </MyCssGrid>
                            }
                            else
                            {
                                <MyCssGrid Padding="@Gutter.Px()" Gap="@Gutter.Px()" Template="@(new CssGridLayout("repeat(3, 1fr)", "repeat(auto-fit, minmax(0, max-content))"))">
                                    @foreach (var provider in _loginUserVM.ExternalLogins)
                                    {
                                        <MyCssGridItem>
                                            <MyButton Value="provider.DisplayName" Icon="IconType.From(provider.DisplayName.ToEnum<BrandsIconType>())" Styling="ButtonStyling.Success" Sizing="ButtonSizing.FillAndDoubleHeight" OnClick="@(e => BtnExternalLogin_ClickAsync(e, provider.Name))"></MyButton>
                                        </MyCssGridItem>
                                    }
                                </MyCssGrid>
                            }
                        </MyCssGridItem>
                        
                    </MyCssGrid>
                </MyCssGridItem>

                <MyCssGridItem class="my-login-modal-right-panel-container">
                    <MyCssGrid Template="@(new CssGridLayout("1fr", "repeat(2, auto)"))">

                        <MyCssGridItem class="my-login-modal-right-panel-title-container my-modal-header">
                            Wallet Login:
                        </MyCssGridItem>

                        <MyCssGridItem class="my-login-modal-right-panel-body-container">
                            <MyCssGrid Padding="@Gutter.Px()" Gap="@Gutter.Px()" Template="@(new CssGridLayout("repeat(3, 1fr)", "repeat(auto-fit, minmax(0, max-content))"))">

                                <MyCssGridItem>
                                    <MyButton Value="@("Metamask")" Icon="IconType.From(BrandsIconType.Metamask)" Styling="ButtonStyling.Danger" Sizing="ButtonSizing.FillAndDoubleHeight" Click="BtnWalletLogin_ClickAsync"></MyButton>
                                </MyCssGridItem>

                            </MyCssGrid>
                        </MyCssGridItem>
                        
                    </MyCssGrid>
                </MyCssGridItem>

            </MyCssGrid>
        </MyEditForm>
    }
    else if (HasAuthenticationStatus(AuthStatus.Authenticated))
    {
        <MyCssGrid 
            Padding="StylesConfig.Gutter.Px()" 
            Gap="StylesConfig.Gutter.Px()" 
            Template="@(new CssGridLayout("150px auto", "repeat(2, auto)"))">
            <MyCssGridItem @ref="_giAvatarContainer">
                <div>
                    <div class="logged-user-avatar-container">
                        @if (AuthenticatedUser.Avatar is null)
                        {
                            <MyIcon IconType="IconType.From(LightIconType.User)" Color="Color.Blue" SizeMode="@IconSizeMode.Contain" class="logged-user-no-avatar"></MyIcon>
                        }
                        else 
                        {
                            <MyImage Path="AuthenticatedUser.Avatar"></MyImage>
                        }
                    </div>
                </div>
            </MyCssGridItem>
            <MyCssGridItem>
                <MyCssGrid
                    Gap="StylesConfig.Gutter.Px()" 
                    Template="@(new CssGridLayout("auto", "repeat(3, max-content)"))">
                    <MyCssGridItem Area="@(new CssGridArea(1, 1))">
                        <div>
                            <div class="logged-user-username">
                                @AuthenticatedUser.UserName
                            </div>
                            <div class="logged-user-login-time">
                                last login: @AuthenticatedUser.LoginTimestamp.ToLocal().ToTimeDateString()
                            </div>
                        </div>
                    </MyCssGridItem>
                    @{
                        //var testItems = Enumerable.Range(1, 10).Select(i => "TestItem" + i).ToArray();
                        var roles = AuthenticatedUser.Roles.Select(r => r.Name).ToArray();
                        var claims = AuthenticatedUser.Claims.Select(r => r.Name).ToArray();
                    }
                    <MyCssGridItem Area="@(new CssGridArea(1, 2))">
                        <div class="logged-user-roles-container">
                            @if (!roles.Any()) 
                            {
                                <div class="logged-user-no-roles">(no roles assigned)</div>
                            }
                            else
                            {
                                <div class="logged-user-roles">
                                    @foreach (var role in roles)
                                    {
                                        <MyBadge Badge="@BadgeKind.Primary">@role</MyBadge>
                                    }
                                </div>
                            }
                        </div>
                    </MyCssGridItem>
                    <MyCssGridItem Area="@(new CssGridArea(1, 3))">
                        <div class="logged-user-claims-container">
                            @if (!claims.Any()) 
                            {
                                <div class="logged-user-no-claims">(no claims assigned)</div>
                            }
                            else
                            {
                                <div class="logged-user-claims">
                                    @foreach (var claim in claims)
                                    {
                                        <MyBadge Badge="@BadgeKind.Info">@claim</MyBadge>
                                    }
                                </div>
                            }                            
                        </div>
                    </MyCssGridItem>
                </MyCssGrid>
            </MyCssGridItem>
            <MyCssGridItem Area="@(new CssGridArea(1, 2, 2))">
                <MyCssGrid
                    Gap="StylesConfig.Gutter.Px()" 
                    Template="@(new CssGridLayout("repeat(2, 1fr)", "auto"))"
                    MDTemplate="@(new CssGridLayout("repeat(2, max-content)", "auto"))"
                    class="logged-user-actions">
                    <MyCssGridItem>  
                        <MyButton Value="@("Sign Out".ToBp())" Icon="IconType.From(LightIconType.SignOut)" Styling="ButtonStyling.Danger" Sizing="ButtonSizing.Fill" OnClick="BtnSignOut_ClickAsync"></MyButton>
                    </MyCssGridItem>
                    <MyCssGridItem>  
                        <MyButton Value="@("Edit".ToBp())" Icon="IconType.From(LightIconType.Edit)" Styling="ButtonStyling.Primary" Sizing="ButtonSizing.Fill" OnClick="BtnEdit_ClickAsync"></MyButton>
                    </MyCssGridItem>
                </MyCssGrid>
            </MyCssGridItem>
        </MyCssGrid>
    }

</CascadingValue>
