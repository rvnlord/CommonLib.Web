@page "/Test/ControlsTest/"

@using CommonLib.Web.Source.Common.Utils.UtilClasses
@using CommonLib.Web.Source.Common.Converters
@using CommonLib.Source.Common.Converters
@using static CommonLib.Web.Source.Common.Components.StylesConfig
@using System.Linq.Expressions
@using CommonLib.Source.Common.Extensions
@using CommonLib.Source.Common.Extensions.Collections
@using CommonLib.Source.Common.Utils
@using CommonLib.Source.Common.Utils.UtilClasses
@using CommonLib.Web.Source.Common.Extensions
@using CommonLib.Web.Source.Common.Extensions.Collections
@using CommonLib.Web.Source.Models
@using CommonLib.Web.Source.ViewModels
@using Telerik.Blazor
@using static CommonLib.Web.Source.Models.BlazorParameter
@using System.ComponentModel.DataAnnotations
@using Blazored.FluentValidation
@using Telerik.Blazor.Components.Editor

@inherits ControlsTestBase

<CascadingValue Value="_bpParentToCascade" Name="ParentParameter">

    <div class="my-col-sm-auto my-col-12" style="background: #101010;">
        <MyEditForm @ref="_editForm" EditContext="_editContext" class="my-container">
            <MyFluentValidator @ref="_validator" />

            <div class="my-row">
                <div class="my-col-12 my-media-query-test-container">
                    <MyMediaQuery DeviceSize="DeviceSizeKind.XS" OnChange="MediaQuery_ChangedAsync"></MyMediaQuery>
                    <MyMediaQuery DeviceSize="DeviceSizeKind.SM" OnChange="MediaQuery_ChangedAsync"></MyMediaQuery>
                    <div>@MediaQueryMessage</div>
                </div>
            </div>

            <MyCssGrid Padding="HalfGutter.Px()"
                       Gap="Gutter.Px()"
                       Template="@(new CssGridLayout("auto", "repeat(12, minmax(80px, auto))"))"
                       SMTemplate="@(new CssGridLayout("60px auto", "repeat(6, minmax(60px, auto))"))"
                       MDTemplate="@(new CssGridLayout("60px auto 200px 100px", "repeat(3, minmax(40px, auto))"))"
                       class="my-test" @ref="_cssgridTest">
                <MyCssGridItem class="item1">1</MyCssGridItem>
                <MyCssGridItem class="item2">2: Device Size: @(_cssgridTest?.CurrentDeviceSize.EnumToString() ?? "not defined"), Layout For: @(_cssgridTest?.HighestDeviceSizeWithLayout?.EnumToString() ?? "not defined")</MyCssGridItem>
                    <MyCssGridItem class="item3">3</MyCssGridItem>
                    <MyCssGridItem class="item4">4</MyCssGridItem>
                    <MyCssGridItem class="item5">5</MyCssGridItem>
                    <MyCssGridItem class="item6" MDArea="@(new CssGridArea(2, 2, 2, 1))">6</MyCssGridItem>
                    <MyCssGridItem class="item7" Hide="@(new CssGridAreaHide(DeviceSizeKind.MD))">7</MyCssGridItem>
                    <MyCssGridItem class="item8">8</MyCssGridItem>
                    <MyCssGridItem class="item9">9</MyCssGridItem>
                    <MyCssGridItem class="item10">10</MyCssGridItem>
                    <MyCssGridItem class="item11">11</MyCssGridItem>
                    <MyCssGridItem class="item12">12</MyCssGridItem>
                </MyCssGrid>

                <MyCssGrid Padding="HalfGutter.Px()" Gap="Gutter.Px()"
                       XLTemplate="@(new CssGridLayout("2fr 3fr 7fr", "repeat(auto-fit, minmax(0, max-content))"))"
                       LGTemplate="@(new CssGridLayout("3fr 4fr 5fr", "repeat(auto-fit, minmax(0, max-content))"))"
                       SMTemplate="@(new CssGridLayout("6fr 6fr", "repeat(auto-fit, minmax(0, max-content))"))"
                       Template="@(new CssGridLayout("12fr", "repeat(auto-fit, minmax(0, max-content))"))">

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Name)" Align="@HorizontalAlignment.Right" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyTextInput Icon="IconType.From(LightIconType.User)" For="@(() => _employee.Name)" SyncPaddingGroup="controls-test-panel" />
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Name)" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Department)" Align="@HorizontalAlignment.Right" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyDropDown Icon="IconType.From(LightIconType.Box)" For="@(() => _employee.Department)" SyncPaddingGroup="@("controls-test-panel".ToBp())" />
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Department)" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Domain)" Align="@HorizontalAlignment.Right" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyDropDown Icon="IconType.From(LightIconType.Dragon)" For="@(() => _employee.Domain)" PossibleValues="@(new[] { "test1.com", "test2.com", "test3.com", "test4.com" })" SyncPaddingGroup="@("controls-test-panel".ToBp())" />
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Domain)" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Password)" Align="@HorizontalAlignment.Right" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyPasswordInput For="@(() => _employee.Password)" SyncPaddingGroup="controls-test-panel" />
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Password)" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Salary)" Align="@HorizontalAlignment.Right" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyInputGroup>
                            <TelerikNumericTextBox @ref="_tnumSalary"
                                Class="@(_tnumSalary is null ? $"my-guid_{_tnumSalaryGuid} my-input-sync-padding-group_{_syncPaddingGroup}"  : _tnumSalary.Class)"
                                Value="_employee.Salary"
                                ValueChanged="@(async (decimal? value) => {
                                    _employee.Salary = value;
                                    await _editContext.NotifyFieldChangedAsync(() => _employee.Salary, true);
                                    //_tnumSalary.StateHasChanged();
                                    //await JQuery.QueryOneAsync(_tnumSalaryGuid).RemoveClassesAsync(new[] { "my-valid", "my-invalid" }).AddClassAsync(_tnumSalaryValidationClass);
                                })"
                                Enabled="@(_tnumSalary is null ? false : _tnumSalary.Enabled)"
                                Format="0.00 $"
                                Decimals="2"
                                Min="0m"
                                Max="10000m"
                                Step="1250.50m"
                                Placeholder="@_employee.GetPropertyDisplayName(e => e.Salary).Append("...")">
                            </TelerikNumericTextBox>
                            <MyInputGroupPrepend>
                                <MyIcon IconType="IconType.From(LightIconType.CircleDollar)"></MyIcon>
                            </MyInputGroupPrepend>
                            <MyInputGroupAppend>
                                <MyButton Icon="IconType.From(LightIconType.BasketballBall)" Sizing="ButtonSizing.Quadratic"></MyButton>
                                <MyButton Icon="IconType.From(LightIconType.BreadLoaf)" Sizing="ButtonSizing.Quadratic"></MyButton>
                            </MyInputGroupAppend>
                        </MyInputGroup>
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Salary)" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.DateOfBirth)" Align="@HorizontalAlignment.Right" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyInputGroup>
                            <TelerikDatePicker @ref="_tdpDateOfBirth"
                                Class="@(_tdpDateOfBirth is null ? $"my-guid_{_tdpDateOfBirthGuid} my-input-sync-padding-group_{_syncPaddingGroup}" : _tdpDateOfBirth.Class)"
                                Value="_employee.DateOfBirth"
                                ValueChanged="@(async (DateTime? value) => {
                                    _employee.DateOfBirth = value;
                                    await _editContext.NotifyFieldChangedAsync(() => _employee.DateOfBirth, true); })"
                                Enabled="@(_tdpDateOfBirth is not null && _tdpDateOfBirth.Enabled)"
                                Format="dd-MM-yyyy"
                                Min="new DateTime(1900, 1, 1)"
                                Max="DateTime.Now - TimeSpanUtils.FromApproximateYears(18)"
                                Placeholder="@_employee.GetPropertyDisplayName(e => e.DateOfBirth).Append("...")">
                                <DatePickerSteps Year="1" Month="1" Day="1" />
                            </TelerikDatePicker>
                            <MyInputGroupPrepend>
                                <MyIcon IconType="IconType.From(LightIconType.Calendar)"></MyIcon>
                            </MyInputGroupPrepend>
                            <MyInputGroupAppend>
                                <MyButton Icon="IconType.From(LightIconType.BasketballBall)" Sizing="ButtonSizing.Quadratic"></MyButton>
                                <MyButton Icon="IconType.From(LightIconType.Bicycle)" Sizing="ButtonSizing.Quadratic"></MyButton>
                            </MyInputGroupAppend>
                        </MyInputGroup>
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.DateOfBirth)" />
                    </MyCssGridItem>
                    
                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.AvailableFrom)" Align="@HorizontalAlignment.Right" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyInputGroup>
                            <TelerikDateTimePicker @ref="_tdtpAvailableFrom"
                                Class="@(_tdtpAvailableFrom is null ? $"my-guid_{_tdtpAvailableFromGuid} my-input-sync-padding-group_{_syncPaddingGroup}" : _tdtpAvailableFrom.Class)"
                                Value="_employee.AvailableFrom"
                                ValueChanged="@(async (DateTime? value) => {
                                    _employee.AvailableFrom = value;
                                    await _editContext.NotifyFieldChangedAsync(() => _employee.AvailableFrom, true); })"
                                Enabled="@(_tdtpAvailableFrom is not null && _tdtpAvailableFrom.Enabled)"
                                Format="dd-MM-yyyy HH:mm:ss"
                                Min="DateTime.UtcNow"
                                Max="DateTime.UtcNow + TimeSpanUtils.FromApproximateMonths(4)"
                                Placeholder="@_employee.GetPropertyDisplayName(e => e.AvailableFrom).Append("...")">
                                <DateTimePickerSteps Year="1" Month="1" Day="1" Hour="1" Minute="1" Second="1" />
                            </TelerikDateTimePicker>
                            <MyInputGroupPrepend>
                                <MyIcon IconType="IconType.From(LightIconType.Calendar)"></MyIcon>
                            </MyInputGroupPrepend>
                            <MyInputGroupAppend>
                                <MyButton Icon="IconType.From(LightIconType.BatteryQuarter)" Sizing="ButtonSizing.Quadratic"></MyButton>
                                <MyButton Icon="IconType.From(LightIconType.FlaskPotion)" Sizing="ButtonSizing.Quadratic"></MyButton>
                            </MyInputGroupAppend>
                        </MyInputGroup>
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.AvailableFrom)" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Asset)" Align="@HorizontalAlignment.Right" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyInputGroup>
                            <TelerikAutoComplete @ref="_tacAsset"
                                Class="@(_tacAsset is null ? $"my-guid_{_tacAssetGuid} my-input-sync-padding-group_{_syncPaddingGroup} my-k-autocomplete-asset" : _tacAsset.Class)"
                                Data="@_employee.AvailableAssets"
                                Filterable="true"
                                Value="@_employee.Asset?.Name"
                                ValueField="@(nameof(TestAsset.Name))"
                                ValueChanged="@(async (string value) => {
                                    var matchingAsset = _employee.AvailableAssets.SingleOrNull(a => a.Name.EqualsIgnoreCase(value));
                                    _employee.Asset = matchingAsset ?? new TestAsset { Name = value };
                                    var jqTacAsset = await JQuery.QueryOneAsync(_tacAssetGuid);
                                    await jqTacAsset.RemoveAsync(".k-autocomplete-symbol");
                                    if (_employee.Asset.Image is not null)
                                    {
                                        var left = (await jqTacAsset.CssAsync("padding-left")).ToDouble() + 5;
                                        if ((await jqTacAsset.FindAsync(".k-input-inner")).Single().Classes.Contains("my-ml--5px"))
                                            left -=  5;
                                        var symbolContent = $"<div class=\"k-autocomplete-symbol\" style=\"background-image: url('{_employee.Asset.Image.ToBase64ImageString()}'); width: 24px; height: 24px; border-radius: 50%; background-size: contain; background-repeat: no-repeat; background-position: center center; box-sizing: border-box; top: 5px; left: {left}px; z-index: 2; position: absolute\"></div>";
                                        await jqTacAsset.PrependAsync(symbolContent);
                                    }
                                    await _editContext.NotifyFieldChangedAsync(() => _employee.Asset, true);
                                })"
                                Enabled="@(_tacAsset is not null && _tacAsset.Enabled)"
                                Placeholder="@_employee.GetPropertyDisplayName(e => e.Asset).Append("...")">
                                <ItemTemplate>
                                    <div style="border-radius: 50%; flex: 0 0 24px; background-image: linear-gradient(160deg, black, #006000)">
                                        <MyImage Path="@context.Image" style="width: 24px; height: 24px; border-radius: 50%"></MyImage>
                                    </div>
                                    <div>@context.Name</div>
                                </ItemTemplate>
                            </TelerikAutoComplete>
                            <MyInputGroupPrepend>
                                <MyIcon IconType="IconType.From(LightIconType.BitcoinSign)"></MyIcon>
                            </MyInputGroupPrepend>
                            <MyInputGroupAppend>
                                <MyButton Icon="IconType.From(LightIconType.BezierCurve)" Sizing="ButtonSizing.Quadratic"></MyButton>
                                <MyButton Icon="IconType.From(LightIconType.Frog)" Sizing="ButtonSizing.Quadratic"></MyButton>
                            </MyInputGroupAppend>
                        </MyInputGroup>
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Asset)" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Message)" Align="@HorizontalAlignment.Right" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <TelerikEditor @ref="_teMessage"
                            Class="@(_teMessage is null ? $"my-guid_{_teMessageGuid} my-placeholder_{_employee.GetPropertyDisplayName(e => e.Message).Append("...")}" : _teMessage.Class)"
                            Tools="@(new List<IEditorTool> { new CustomTool("TextDecoration") })"
                            Value="@_employee.Message"
                            EditMode="@EditorEditMode.Div"
                            ValueChanged="@(async (string value) => {
                                _employee.Message = value;
                                await _editContext.NotifyFieldChangedAsync(() => _employee.Message, true);
                            })"
                            Enabled="@(_teMessage is not null && _teMessage.Enabled)">
                            <EditorCustomTools>
                                <EditorCustomTool Name="TextDecoration">
                                    <TelerikButtonGroup>
                                        <ButtonGroupButton Class="my-k-button-icon-only" OnClick="@(async () => await _teMessage.ExecuteAsync(new ToolCommandArgs("italic")))" Icon="italic" />
                                        <ButtonGroupButton Class="my-k-button-icon-only" OnClick="@(async () => await _teMessage.ExecuteAsync(new ToolCommandArgs("bold")))" Icon="bold" />
                                        <ButtonGroupButton Class="my-k-button-icon-only" OnClick="@(async () => await _teMessage.ExecuteAsync(new ToolCommandArgs("underline")))" Icon="underline" />
                                    </TelerikButtonGroup>
                                </EditorCustomTool>
                            </EditorCustomTools>
                        </TelerikEditor>
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Message)" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Gender)" Align="@HorizontalAlignment.Right" Sizing="LabelSizing.LineHeight" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyCssGrid Gap="Gutter.Px()" Template="@(new CssGridLayout("1fr 1fr", "auto"))">
                            <MyCssGridItem>
                                <MyRadioButton For="@(() => _employee.Gender)" ValueIfTrue="Gender.Male" />
                            </MyCssGridItem>
                            <MyCssGridItem>
                                <MyRadioButton For="@(() => _employee.Gender)" ValueIfTrue="Gender.Female" />
                            </MyCssGridItem>
                        </MyCssGrid>
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Gender)" Sizing="LabelSizing.LineHeight" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.TermsAccepted)" Align="@HorizontalAlignment.Right" Sizing="LabelSizing.LineHeight" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyCheckBox For="@(() => _employee.TermsAccepted)"></MyCheckBox>
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.TermsAccepted)" Sizing="LabelSizing.LineHeight" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Progress)" Align="@HorizontalAlignment.Right" Sizing="LabelSizing.LineHeight" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyProgressBar For="@(() => _employee.Progress)" Description="@("Test.png")" Sizing="ProgressBarSizing.LineHeight" />
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Progress)" Sizing="LabelSizing.LineHeight" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1" Gap="CssGridAreaGap.OnlyBottom((-Gutter).Px())" SMGap="CssGridAreaGap.Auto">
                        <MyLabel For="@(() => _employee.Files)" Align="@HorizontalAlignment.Right" Sizing="LabelSizing.LineHeight" />
                    </MyCssGridItem>
                    <MyCssGridItem>
                        <MyFileUpload For="@(() => _employee.Files)" PreviewFor="@BP(() => _employee.Avatar)" PredefinedSaveUrl="PredefinedSaveUrlKind.SaveFileInUserFolder" />
                    </MyCssGridItem>
                    <MyCssGridItem SMArea="CssGridArea.C1SpanAll" LGArea="CssGridArea.Auto">
                        <MyValidationMessage For="@(() => _employee.Files)" Sizing="LabelSizing.LineHeight" />
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1SpanAll" LGArea="CssGridArea.C2SpanAll">
                        <MyCssGrid Gap="Gutter.Px()" Template="@(new CssGridLayout("1fr", "auto"))" LGTemplate="@(new CssGridLayout("max-content", "auto"))">
                            <MyCssGridItem>
                                <MyButton Value="@("Submit".ToBp())" Click="BtnSubmit_ClickAsync" Icon="IconType.From(LightIconType.PaperPlane)" SubmitsForm="true" Styling="@ButtonStyling.Primary" Sizing="ButtonSizing.Fill" IconPlacement="ButtonIconPlacement.Right" />
                            </MyCssGridItem>
                        </MyCssGrid>
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1SpanAll">
                        <TelerikGrid @ref="_gvTestData" Data="@MyData" EditMode="@GridEditMode.Inline" Pageable="true" Height="420px" Class="@(_gvTestData is null ? $"my-guid_{_gvTestDataGuid} disabled" : _gvTestData.Class)"
                            OnUpdate="@GvTestData_UpdateAsync" OnEdit="@GvTestData_EditAsync" OnDelete="@GvTestData_DeleteAsync" OnCreate="@GvTestData_CreateAsync" OnCancel="@GvTestData_CancelAsync" 
                            OnRowRender="@(async (GridRowRenderEventArgs e) => {
                                if (!JQuery.JsRuntime.GetProperty<bool>("IsInitialized"))
                                    return;
                                await (await InputModuleAsync).InvokeVoidAsync("blazor_BindOverlayScrollBarToGridView", _gvTestDataGuid);
                            })">
                            <GridSettings>
                                <GridValidationSettings>
                                    <ValidatorTemplate>
                                        <FluentValidationValidator Validator="@_testDataValidator" @ref="_fvTestDataValidator">
                                        </FluentValidationValidator>
                                    </ValidatorTemplate>
                                </GridValidationSettings>
                            </GridSettings>
                            <GridToolBar>
                                <GridCommandButton Command="Add" Icon="add">Add Employee</GridCommandButton>
                            </GridToolBar>
                            <GridColumns>
                                <GridColumn Field=@nameof(TestDataVM.Id) Title="Id" Editable="false" />
                                <GridColumn Field=@nameof(TestDataVM.Name) Title="Name" />
                                <GridCommandColumn>
                                    <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Update</GridCommandButton>
                                    <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
                                    <GridCommandButton Command="Delete" Icon="delete" Class="my-k-command-button-icon-only" />
                                    <GridCommandButton  Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
                                </GridCommandColumn>
                            </GridColumns>
                        </TelerikGrid>
                    </MyCssGridItem>

                    <MyCssGridItem Area="CssGridArea.C1SpanAll">
                        <TelerikRadialGauge @ref="_gTest" Class="@(_gTest is null ? $"my-guid_{_gTestGuid} disabled" : _gTest.Class)">
                            <RadialGaugeScales>
                                <RadialGaugeScale Min="0" Max="50" MajorUnit="5" MinorUnit="1" StartAngle="-60" EndAngle="240" RangePlaceholderColor="#404040" RangeSize="10" RangeDistance="-3">
                                    <RadialGaugeScaleRanges>
                                        <RadialGaugeScaleRange From="0" To="10" Color="#009402"></RadialGaugeScaleRange>
                                        <RadialGaugeScaleRange From="10" To="20" Color="rgb(255,255,0)"></RadialGaugeScaleRange>
                                        <RadialGaugeScaleRange From="20" To="30" Color="red"></RadialGaugeScaleRange>
                                    </RadialGaugeScaleRanges>
                                    <RadialGaugeScaleLabels Format="0 B" Color="blue">
                                    </RadialGaugeScaleLabels>
                                </RadialGaugeScale>
                            </RadialGaugeScales>
                            <RadialGaugePointers>
                                <RadialGaugePointer Value="10" Length="0.8" Color="red">
                                    <RadialGaugePointerCap Color="green" Size="0.15">
                                    </RadialGaugePointerCap>
                                </RadialGaugePointer>
                                <RadialGaugePointer Value="30" Length="0.8" Color="#0356fc" >
                                    <RadialGaugePointerCap Color="white" Size="0.10">
                                    </RadialGaugePointerCap>
                                </RadialGaugePointer>
                                <RadialGaugePointer Value="70" Length="0.8" Color="rgb(210, 3, 252)" >
                                    <RadialGaugePointerCap Color="blue" Size="0.05">
                                    </RadialGaugePointerCap>
                                </RadialGaugePointer>
                            </RadialGaugePointers>
                        </TelerikRadialGauge>
                    </MyCssGridItem>

                </MyCssGrid>

            </MyEditForm>
        </div>

    </CascadingValue>